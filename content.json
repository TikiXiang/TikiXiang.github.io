{"meta":{"title":"Tiki Xiang的博客","subtitle":"","description":"记录技术，记录生活博客","author":"Tiki Xiang","url":"http://blog.tiki-xiang.cn","root":"/"},"pages":[{"title":"归档","date":"2022-03-17T03:02:26.590Z","updated":"2022-03-17T03:01:46.555Z","comments":true,"path":"archive.html","permalink":"http://blog.tiki-xiang.cn/archive.html","excerpt":"","text":""},{"title":"","date":"2022-03-17T03:48:27.477Z","updated":"2022-03-17T03:48:27.477Z","comments":true,"path":"custom.css","permalink":"http://blog.tiki-xiang.cn/custom.css","excerpt":"","text":"#nexmoe-header .nexmoe-list .nexmoe-list-item.true { opacity: 0.9; background: #669708; box-shadow: 0 2px 12px #669708; } .nexmoe-rainbow a:nth-child(7n+1) { background-color: #669708; color: #ffffff; } #nexmoe-header .nexmoe-widget-wrap .nexmoe-widget-title { font-size: 1em; font-weight: 400; padding: 24px 18px 12px; margin: 0; color: #669708; } #nexmoe-header .nexmoe-widget-wrap .nexmoe-widget .category-list-count, #nexmoe-header .nexmoe-widget-wrap .nexmoe-widget .archive-list-count { background-color: #669708; display: inline-block; width: 26px; height: 26px; line-height: 26px; text-align: center; border-radius: 100%; color: #ffffff; position: absolute; right: 18px; top: 10px; }"},{"title":"","date":"2022-03-17T03:06:21.161Z","updated":"2022-03-17T03:06:21.161Z","comments":true,"path":"friends.html","permalink":"http://blog.tiki-xiang.cn/friends.html","excerpt":"","text":""},{"title":"分类","date":"2022-03-17T02:34:14.000Z","updated":"2022-03-17T02:35:14.680Z","comments":true,"path":"categories/index.html","permalink":"http://blog.tiki-xiang.cn/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-03-17T02:34:48.000Z","updated":"2022-03-17T02:35:36.717Z","comments":true,"path":"tags/index.html","permalink":"http://blog.tiki-xiang.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"《高性能MySql》读书笔记--第五章 创建高性能的索引","slug":"《高性能MySql》读书笔记-第五章-创建高性能的索引","date":"2022-03-17T11:42:06.000Z","updated":"2022-03-17T11:51:40.128Z","comments":true,"path":"2022/03/17/《高性能MySql》读书笔记-第五章-创建高性能的索引/","link":"","permalink":"http://blog.tiki-xiang.cn/2022/03/17/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySql%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/","excerpt":"创建高性能的索引索引基础","text":"创建高性能的索引索引基础 索引的类型 B-Tree索引 底层存储引擎可能使用不不同存储结构(NDB T-Tree；innodb：B+Tree) B-Tree对索引列是顺序组织存储的 查询有效场景 全值匹配 匹配最左前缀 匹配列前缀 匹配范围值 精确匹配某一列并范围匹配另外一列 只访问索引的查询 限制 不是按照最左列开始查找 不能跳过索引中的列 某个列范围查询，右边所有列无法索引优化查找 哈希索引 只有memory显示支持hash索引 需值完全对应 限制 只包含哈希值和行指针 并不是按照索引值顺序存储的，无法排序 不支持部分索引列匹配查找 只支持等值比较查询 哈希索引数据非常快，除非哈希冲突遍历链表行指针 冲突越多代价越大 memory支持哈希，NDB也支持，InnoDb有特殊功能为自适应哈希索引（索引值应用频繁时在内存基于B-Tree索引之上再创建一个哈希索引，快速哈希查找）（innodb可以对大字符列hash建列并做以索引） 尽量避免MD5与SHA1做加密函数，字符串较长，最好在MD5的基础上截取自定义哈希函数 查询条件避免冲突查询多条需写入哈希值+列值 空间数据索引（R-Tree） MyISAM支持空间索引用作地理数据存储 无需前缀查询，必须使用Mysql的GIS相关函数维护 Mysql对GIS支持并不完善，不建议使用 PostgreSQL对GIS做的不错 全文索引 查找文本中的关键词而不是直接比较索引中的值 在同列建全文索引与B-Tree索引不冲突 其他索引类别 TokuDB（fractal tee index分形树索引），ScalaDB（Patricia tries） 索引的优点索引大大减少服务器需要扫描的数据量索引可以帮助服务器避免排序和临时表索引可以将随机IO变为顺序IO高性能的索引策略独立的列（索引列不能是表达式的一部分，也不能是函数的参数）前缀索引和索引选择性（不重复的索引值（基数）&#x2F;数据表记录总数） 模拟哈希索引处理很长字符列 索引长字符列的开始部分字符 对于BLOB、TEXT或很长的VARCHAR类型列，必须使用前缀索引 如何合理计算选择性，针对完整列的选择性选择接近完整列选择性的列的前缀位数 ALTER TABLE XX ADD KEY (XX(位数)) 多列索引 过多单列索引，一星索引，索引合并（union） 多个索引相交，需优化多列索引 服务器对多个索引联合（union）需耗费大量CPU和内存资源在缓存排序合并上 优化器不会将这些计算到查询成本上，成本被低估 有索引合并，尽量优化表结构，或设置optimizer_switch关闭索引合并；也可IGNORE INDEX让优化器忽略索引 选择合适的索引列顺序 背景 考虑索引查询并更好满足排序与分组的需要；仅讨论B-Tree顺序存储的索引 经验法则 将选择性最高的列放到索引最前列 select sum(a&#x3D;1),sum(b&#x3D;1) from t;谁的计数最小谁的选择性更高 聚簇索引 含义 不是索引类型，而是一种数据存储方式；聚簇表示数据行和相邻的键值紧凑地存储在一起 无法同时把数据存在两个地方，一个表只能一个聚簇索引（覆盖索引模拟多个聚簇索引的情况） 主键列；若未定义主键，innodb会选择一个唯一的费控索引代替，若没有这样的索引，会隐式定义一个主键 优点 相关数据保存在一起 数据访问更快 使用覆盖索引扫描的查询可以直接使用叶节点中的主键值 缺点 最大限度提高了IO密集型应用的性能 插入速度严重依赖于插入顺序 更新聚簇索引的表在插入新航或者主键被更新导致需要移动行时可能面临页分裂问题 可能导致全表扫描变慢 二级索引（非聚簇索引）可能比想象的要更大 二级索引访问需要两次索引查找（保存的主键值）（自适应哈希索引能减少这样重复工作） InnoDB与MyISAM数据对比 MyISAM按照数据插入顺序存储在磁盘上 MyISAM的主键索引仅仅是一个名为PRIMARY的唯一非空索引 InnoDB聚簇索引就是表 每个叶子节点都包含了主键值、事务id、用于事务和MVCC的回滚指针以及所有的剩余列 InnoDB二级索引叶子节点存储的是主键值（非行指针），减少了出现行移动数据页分裂的索引维护工作 每个叶子节点都包含了索引列与主键值 在InnoDB表中按主键顺序插入行 主键选取 在没有数据需要聚集可以定义一个代理键，和应用无关，AUTO_INCREMENT自增列，保证数据按顺序写入 避免随机（避免UUID）：花费时间长，占用空间大 数据插入原理 顺序主键 InnoDB把每一条记录都存储在上一条记录后面，当达到页最大填充银子（默认为页大小15&#x2F;16），下一条插入新的页中。按这种顺序加载，主键页就会近似于被顺序记录填满 注意：顺序更坏的结果 争用主键值，间隙锁竞争，AUTO INCREMENT锁机制 无序主键 不能直接插在上一条之后，只能寻找合适位置（通常是已有数据中间位置）并分配空间，会增加额外工作，数据分布不够优化 缺点 写入的目标页可能已经刷新到磁盘并从缓存中删除，或者还没有被加载到缓存中，innodb在插入钱不得不先找到并从磁盘读取目标页到内存，将导致大量随机IO 写入是乱序的，innodb不得不频繁页分裂操作，以便为新的行分配空间。一次插入需要至少修改三个页 页分裂后页变得稀疏并不规则填充，数据碎片 覆盖索引（包含或者覆盖所有需要查询的字段的值，无需回表） 好处 索引条目通常远小于数据行大小，mysql可极大减少数据访问量，对缓存负载非常重要，减少数据拷贝 索引是按照列值顺序存储，对于IO密集型范围查询会比随机从磁盘读取每一行数据IO要少的多 一些存储引擎在内存中只缓存索引，数据则依赖操作系统缓存，访问数据需要一次系统调用 innodb聚簇索引，二级索引覆盖主键值查询，避免二次查询 因为要存储索引列的值，所以只能用B-Tree做覆盖索引；EXPLAIN时Extra会展示Using index 条件索引全覆盖，查询内容未全覆盖，5.5前的老版本皆在条件为假的情况依然回表获取数据行 使用索引扫描来做排序 mysql得到有序结果方法 排序操作 按索引顺序扫描（Explian的type列为index，非Extra的Using index） 索引覆盖查询，如果不能覆盖造成回表查询 使用同一个索引完成排序与查找 索引顺序和orderby顺序完全一致，所有列排序方向一样，才能使用索引对结果排序。 多表联查，仅当orderby子句字段完全为第一个表，才能索引排序 最左前缀要求；特殊情况：前导列为常量 不能使用索引排序的场景 索引列排序方向不同 order运用不存在的列 范围查询 in 压缩（前缀压缩）索引（MyISAM） 前缀压缩减少索引大小，使更多索引可以放入内存 默认只压缩字符串，参数设置可对整数压缩 完全保存索引块第一个值，将其他与第一个值完全相同前缀字节数和剩余不同后缀字符完全存储 例：perform与performance，第一个存储perform，第二个存储7,ance MyISAM对行指针类似前缀压缩 压缩块使用更少空间，代价是操作可能更慢 压缩前缀依赖前面的值，MyISAM无法索引块完成二分查找只能从头扫描 正序还不错，倒叙就不行 CPU密集型应用，因为扫描需要随机查找，压缩索引使得MyISAM在索引查找慢好几倍。对于IO密集型应用，查询带来好处多 CREATE TABLE时指定PACK_KEYS控制索引压缩方式 冗余和重复索引 MySQL需要单独维护重复的索引，优化器在优化查询时需要逐个考虑，影响性能 在相同列创建相同类型索引，应避免创建重复索引，发现立即移除 冗余索引和重复索引不同 (A,B)与A；（A,ID）与（A）；（A,B）与（B,A）不是 增加索引会使插入变慢 访问INFORMATION_SCHEMA表查询 服务器有大量数据或大量表查询INFORMATION_SCHEMA会导致性能问题 common_schema的视图定位 一系列可以安装到服务器常用的存储和视图 pt-duplicate-key-checker 检查变更 （A）与(A,ID)与(A,B,ID)索引排序，建议使用pt-upgrade检查计划变更 未使用的索引 累赘，删除 PerconaServer或MariaDB打开userstates变量，服务器运行一段时间后通过INFORMATION_SCHEMA.INDEX_STATISTICS查到索引使用频率 PerconaToolkit的pt-index-usage,该工具读取日志，对日志每条查询EXPLAIN，打印索引和查询报告 索引和锁 索引可以让查询锁定更少行 减少锁定行的开销 减少锁争用增加并发 通过减少查询行数减少锁数量 5.1以前等待事务执行完释放锁，以后等待过滤掉行后就释放锁 关于InnoDB、索引和锁 InnoDB在二级索引上使用共享锁（读），但方位主键索引需要排他（写）锁，这消除了使用覆盖索引可能性，并且使得SELECT FOR UPDATE比LOCK IN SHARE MODE或非锁定查询要慢得多 索引案例学习支持多种过滤条件 不通知更多的列创建索引性能更好，索引可以过滤掉更多的行 考虑表上所有选项 尽可能将需要范围查询的列放到索引后面 IN的技巧不能滥用，存在枚举增加组合增加最终大大降低性能 避免多个范围条件 范围条件 EXPLAIN区分查询范围值还是查询列表值，使用同样的词range，可以从值得范围和多个等于条件得出不同 对于范围条件查询（&gt;、&lt;等）mysql无法使用后面的索引了，对于多个等值条件(in)则没有该限制 多范围条件可以通过替换范围为特定等值加入索引 优化排序 对选择性低的列，增加特殊索引来排序 选择性低的列翻页 反范式化、预先计算和缓存为解决这类查询仅有的策略 延迟关联 覆盖索引返回主键，再通过主键关联需要的行 维护索引和表找到并修复损坏的表 MyISAM损坏通常是系统崩溃导致，其他引擎用于硬件问题，MYSQL本身缺陷或操作系统问题导致索引损坏 导致返回错误结果或莫须有的主键冲突，严重导致数据库崩溃 check table检查错误 repair table修复表 可以alter修改重建表，比如切换引擎 离线工具myisamchk 到处数据再导入 如果损坏的是系统区域或者表行数据区域而不是索引，不管用 InnoDB的设计原因一般不会损坏，如果损坏则是发生严重错误（数据库硬件问题，管理员错误，rsync备份InndDB） 设置innodb_force_recovery参数进入Innodb强制回复模式来修复数据 更新索引统计信息 查询优化器俩API了解存储引擎索引值分布 records_in_range() info() 表没有统计信息或不准启，优化器可能做出错误的决定，可ANALYZE TABLE重新生成统计信息 memory不存储索引统计信息 myisam将索引统计存储磁盘，ANALYZE需要进行全索引扫描来计算索引基数，过程需要锁表 innodb通过随机索引访问进行评估将其存储内存 SHOW INDEX FROM查看索引基数 INFORMATION_SCHEMA.STATISTICS查询 INNODB抽样计算统计，老版本样本页面8，新版本通过innodb_stats_sample_pages设置 innodb在表首次打开，或者执行ANALYZE TABLE，或表大小发生非常打的变化的时候计算索引统计信息 INNODB在打开某些INFORMATION_SCHEMA或show table status或show index或客户端开启自动补全功能出发索引统计信息更新 如果有大量数据，当io较慢时，客户端或者监控程序出发索引菜鸡更新可能导致大量的锁，给服务器带来额外压力。可以关闭innodb_stats_on_metadata percona版本使用的XtraDB引擎而不是InnodB,KEYI TONGGUO Innodb_stats_auto_update禁止自动采用，需要手动执行ANALYZE TABLE 持久化设置 innodb_use_sys_stats_table(5.1)、innodb_analyze_is_persistent(5.6) 关闭自动统计，需要周期性使用ANALYZE TABLE手动更新 减少索引和数据碎片 B-Tree结构随机访问磁盘，可能会碎片化 表数据存储碎片化 行碎片 行间碎片 逻辑上顺序的页，或者行在磁盘不是顺序存储 剩余空间碎片 数据页中大量空余空间 处理方式 OPTIMIZE TABLE或者导出再导入 不支持OPTIMIZE的可ALTER TABLE重建表 expand_fast_index_creation碎片化整理","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://blog.tiki-xiang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"高性能MySql","slug":"高性能MySql","permalink":"http://blog.tiki-xiang.cn/tags/%E9%AB%98%E6%80%A7%E8%83%BDMySql/"},{"name":"MySql","slug":"MySql","permalink":"http://blog.tiki-xiang.cn/tags/MySql/"},{"name":"数据库","slug":"数据库","permalink":"http://blog.tiki-xiang.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"《高性能MySql》读书笔记--第四章 Schema与数据类型优化","slug":"《高性能MySql》读书笔记-第四章-Schema与数据类型优化","date":"2022-03-17T11:41:28.000Z","updated":"2022-03-17T11:43:34.185Z","comments":true,"path":"2022/03/17/《高性能MySql》读书笔记-第四章-Schema与数据类型优化/","link":"","permalink":"http://blog.tiki-xiang.cn/2022/03/17/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySql%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%9B%9B%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/","excerpt":"Schema与数据类型优化选择优化的数据类型","text":"Schema与数据类型优化选择优化的数据类型 原则 更小的通常更好（占用更少磁盘内存和CPU缓存，处理时需要CPU周期更少） 简单就好（简单数据类型需要更少的CPU周期） 尽量避免NULL（使得索引、索引统计、值比较更为复杂；会使用更多的存储空间；每个索引记录需要一个额外字节） 整数类型 类型（TINYINT|8,SMALLINT|16,MEDIUMINT|24,INT|32,BIGINT|64） 范围-2^(N-1)到2^(N-1)-1 UNSIGNED属性，不允许负值。正数上限提高一倍；相同存储空间，相同性能 指定宽度（INT(11)，不会限制值得合法范围，只会限制Mysql交互工具显示字符的个数） 实数类型 类型（float|4，double|8，decimal（精密计算）） decimal指定小数点前后位数会影响列空间消耗 可以变更为bigint存储（乘以倍数） 字符串类型 VARCHAR和CHAR（存储方式以存储引擎相关） VARCHAR 存储可变长字符串 UPDATE执行更新存储差异 CHAR 定长字符串 适合较短且长度近似的存储 BINARY&#x2F;VARBINARY 存储二进制字节码 BLOB与TEXT类型 分别采用二进制和字符方式存储 innodb会使用专门外部存储区域存储，每个值在行内需要1-4个字节存储指针 BLOB是二进制数据没有排序规则跟字符集，而TEXT有 MYSQL进行排序仅以配置的max_sort_length字节的字符串排序 不能将全部长度的字符串进行索引，也不能使用这些索引消除排序 使用枚举（enum）代替字符串类型 使用（create table a（b ENUM（’x’,’xx’,’xx’））） mysql在存储时非常紧凑，并将每个值在列表位置保存为整数，并在.frm保存数字-字符串的映射关系的查找表 排序按照映射整数值排序，最好在设计时字符就按照顺序对应 缺陷是枚举新增需要ALTER TABLE 日期和时间类型 DATETIME 范围（1001-9999）精度为秒，封装为YYYYMMDDHHMMSS的整数中，与时区无关，8个字节 TIMESTAMP 范围（19700101（格林尼治时间）以来的秒数），4个组合存储，依赖时区 位数据类型 BIT 在一列存储1个或多个true&#x2F;false值 mysql当bit为字符串类型 SET 在整数列上进行按位操作 选择标识符（identityfier） 整数类型 很快并且可以使用AUTO_INCREMENT ENUM和SET类型 糟糕选择，只适合存储固定信息 字符串类型 尽量避免，限号空间，比数字类型慢，myisam会对字符串使用压缩索引，导致查询更慢 特殊类型数据Mysql schema设计中的陷阱太多的列（从行缓冲中将编码过的列转换成行数据结构的操作代价非常高）太多的关联 （mysql限制了关联操作最多只能61张表。EAV(实体-属性-值)设计模式需要许多自关联，所以非常糟糕，解析优化查询代价问题明显，经验法则单个查询最好在12个表以内关联）全能的枚举（尽量用非数值的定义枚举）变相的枚举（枚举允许在列中存储一组定义中单个值，集合列允许在列存储一组定义中N个值）非此发明（NOT INVENT NULL）的NULL范式和反范式范式的优点和缺点 优点 范式化的更新操作通常比反范式化要快 较好的范式化就只有很少或没有重复数据，只需要修改更少数据 表通常更小，可以更好快速在内存里操作 很少有多余数据意味着更少需要DISTINCT或者groupby语句 缺点 需要关联 反范式化的优点和缺点 优点 更少的关联 混用范式化和反范式化缓存表和汇总表使用场景 缓存表（冗余数据）汇总表（聚合数据） 实时维护或定期重建 物化视图（可视化）计数器表加快ALTER TABLE操作的速度技巧 现在不提供服务机器上alter table，然后和提供服务的主库进行切换 创建新表重命名 删除表 默认值变更 ALTER TABLE ALTER COLUMN SET DEFAULT xxx 只修改.frm文件 不重建表的可能情况 移除列的AUTO_INCREMENT属性 增加&#x2F;移除&#x2F;更改ENUM或SET敞亮 快速创建MyISAM索引 先禁用索引载入数据然后重新启用索引","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://blog.tiki-xiang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"高性能MySql","slug":"高性能MySql","permalink":"http://blog.tiki-xiang.cn/tags/%E9%AB%98%E6%80%A7%E8%83%BDMySql/"},{"name":"MySql","slug":"MySql","permalink":"http://blog.tiki-xiang.cn/tags/MySql/"},{"name":"数据库","slug":"数据库","permalink":"http://blog.tiki-xiang.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"《高性能MySql》读书笔记--第三章 服务器性能剖析","slug":"《高性能MySql》读书笔记-第三章-服务器性能剖析","date":"2022-03-17T11:40:52.000Z","updated":"2022-03-17T11:43:26.282Z","comments":true,"path":"2022/03/17/《高性能MySql》读书笔记-第三章-服务器性能剖析/","link":"","permalink":"http://blog.tiki-xiang.cn/2022/03/17/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySql%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/","excerpt":"服务器性能剖析性能优化简介","text":"服务器性能剖析性能优化简介 通过性能剖析进行优化 测量任务所花费时间 对结果统计与排序 理解性能剖析 排名、总计、平均值 值得优化的查询 异常情况 未知的未知 被隐藏的细节 对应用程序进行性能剖析工具推荐：New relic测量php应用程序 xhprof 剖析MySQL查询剖析服务器负载 捕获MySQL的查询到日志文件（慢查询日志） 分析查询日志（pt-query-digest日志生成报告工具） 剖析单挑查询 使用SHOW PROFILE查询花费 使用SHOW STATUS查询计数器 使用慢查询日志 使用Performance Schema 使用性能剖析诊断间歇性问题确定是单挑查询问题还是服务器问题 使用SHOW GLOBAL STATUS SHOW PROCESSLIST 使用查询日志 理解发现的问题（推荐图） 捕获诊断数据 诊断触发器(Persona Tolkit：pt-stalk) 需要收集什么样的数据 系统状态、CPUY利用率、磁盘使用率和可用空间、ps输出采样、内存利用率 解释结果数据 （pt-mysql-summary;pt-summary打包；pt-sift：检查样本） 诊断案例其他剖析工具使用USER_STATISTICS表使用strace（系统使用情况）","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://blog.tiki-xiang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"高性能MySql","slug":"高性能MySql","permalink":"http://blog.tiki-xiang.cn/tags/%E9%AB%98%E6%80%A7%E8%83%BDMySql/"},{"name":"MySql","slug":"MySql","permalink":"http://blog.tiki-xiang.cn/tags/MySql/"},{"name":"数据库","slug":"数据库","permalink":"http://blog.tiki-xiang.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"《高性能MySql》读书笔记--第二章 基准测试","slug":"《高性能MySql》读书笔记-第二章-基准测试","date":"2022-03-17T11:35:17.000Z","updated":"2022-03-17T11:37:27.501Z","comments":true,"path":"2022/03/17/《高性能MySql》读书笔记-第二章-基准测试/","link":"","permalink":"http://blog.tiki-xiang.cn/2022/03/17/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySql%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/","excerpt":"基准测试为什么需要基准测试","text":"基准测试为什么需要基准测试 验证基于系统的假设重现系统中的某些异常行为测试系统当前的运行情况模拟比当前系统更高的负载，寻找扩展性瓶颈规划未来业务增长测试适应可变环境的能力测试不同硬件、软件和操作系统配置证明新采购设备是否正确基准测试的策略策略 系统整体测试（集成式） 推荐，测试整体性能 单独测试Mysql（单组件式） 测试指标 吞吐量（单位时间内事务处理数） 响应时间或延迟（测试任务所需整体时间） 并发性 可扩展性 基准测试方法常见误区 使用的真实数据的子集不是全集；使用错误数据分布；使用不真实分布；多用户场景只做单用户测试；单服务器测试分布式应用；与真是用户行为不匹配；反复执行同一个查询；没有检查错误；忽略了预热过程；使用默认服务器配置；测试时间太短 设计和规划基准测试基准测试运行足够长时间（考虑预热因素）获取系统性能和状态 CPU使用率、磁盘IO、网络流量统计、SHOW GLOBAL STATUS 计数器 获得准确的测试结果运行基准测试并分析结果绘图的重要性基准测试工具集成式测试工具 ab（apache http服务器基准测试工具） http_load（类ab） JMeter（专门测试web应用） 单组件式测试工具 mysqlslap（模拟服务器负载） MySQL Benchmark Suite（mysql发行包套件） Super Smack（压测与负载） Database Test Suite Percona&#96;s TPCC-MySql Tppl sysbench(多线程压测) 案例","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://blog.tiki-xiang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"高性能MySql","slug":"高性能MySql","permalink":"http://blog.tiki-xiang.cn/tags/%E9%AB%98%E6%80%A7%E8%83%BDMySql/"},{"name":"MySql","slug":"MySql","permalink":"http://blog.tiki-xiang.cn/tags/MySql/"},{"name":"数据库","slug":"数据库","permalink":"http://blog.tiki-xiang.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"《高性能MySql》读书笔记--第一章 架构与历史","slug":"《高性能MySql》读书笔记-第一章-架构与历史","date":"2022-03-17T11:26:52.000Z","updated":"2022-03-17T11:44:55.104Z","comments":true,"path":"2022/03/17/《高性能MySql》读书笔记-第一章-架构与历史/","link":"","permalink":"http://blog.tiki-xiang.cn/2022/03/17/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySql%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/","excerpt":"架构与历史Mysql逻辑架构","text":"架构与历史Mysql逻辑架构 架构图 第一层：非Mysql独有，类似连接处理、授权认证、安全 第二层：核心功能，包括解析、分析、优化、缓存以及内置函数，所有垮决策引擎功能都在这一层实现：存储过程、触发器、视图 第三层：存储引擎，负责数据存储于提取 连接管理与安全性 每个客户端连接在服务器都拥有一个线程，该线程只能轮流在某个CPU核心或者CPU运行，服务器会缓存线程，不需要为新建连接创建或销毁线程 连接时需要认证（用户名密码，若SSL还要验证证书），连接成功后验证访问权限 优化与执行 解析查询，创建内部数据结构（解析树），进行优化。hint优化器影响决策过程，explain解释优化过程。 优化器不关心使用什么引擎，但引擎对优化查询有影响 SELECT语句在解析查询前服务器先检查缓存（Query Cache） 并发控制（服务器层与存储引擎层）读写锁 共享锁（读锁） 排他锁（写锁） 锁粒度（存储引擎管理锁） 表锁（开销小，阻塞） 行锁（开销大，并发处理） 事务ACID 原子性（atomicity） 一致性（consistency） 隔离性（isolation） 持久性（durability） 隔离级别 读未提交（READ_UNCOMMITTED） 提交读（READ_COMMITTED） 可重复度（REPEATABLE_READ）默认 SERIALIZABLE 死锁 场景 同时锁定同一个资源 不同顺序锁定资源 解决方案 死锁检测 死锁超时 Innodb处理死锁：将持有最少行级排它锁的事务回滚 事务日志 作用 存储引擎修改表数据时，只需要修改其内存拷贝，再把修改行为记录到持久在硬盘事务日志中，而不用每次都将修改的数据本身持久到磁盘。 采用追加，磁盘顺序IO，不用频繁移动磁头，事务日志持久以后内存修改的数据可以慢慢刷回磁盘（预写式日志） Mysql中的事务 支持的引擎 InnoDb和NDB Cluster 第三方：XtraDb和PBXT 自动提交（AutoCommit）默认 1或ON表示启用，0或OFF表示禁用 set autocommit &#x3D; 1; 隔离级别设置：set transaction isolation level xxx 事务中混合使用存储引擎 同一事务中混合使用存储引擎不可靠，回滚时不会回滚非事务的，有时候只有回滚时会发出非事务表的变更不能回滚的警告 隐式和显式锁定 innodb两阶段锁定协议，根据隔离级别自动隐式加锁 特定语句来显式锁定 SELECT … LOCK IN SHARE MODE SELECT … FOR UPDATE LOCK&#x2F;UNLOCK TABLES：服务器层实现，存储引擎无关，不能替代事务。 多版本并发控制MVCC实现思想 通过保存数据在某个时间节点的快照来实现 不同存储引擎MVCC实现方式不同 InnoDB的MVCC（每行记录俩隐藏列实现，一列存储黄建时间一列存储过期时间（版本号）） REPEATABLE下SELECT 只查找版本早于当前事务版本的数据行 行的删除版本要么未定义，要么大于当前事务版本号 INSERT 插入保存当前系统版本号作为行版本号 DELETE 系统版本作为删除标示 UPDATE 每插入一条，保存当前系统版本号为行版本号并且同时保存当前系统版本号到原来的行作为行删除标示 Mysql的存储引擎文件系统 每个数据库（schema）保存为数据目录的子目录，创建表时在该子目录创建.frm保存表结构信息 SHOW TABLE STATUS like ‘xxxx’ Name、Engine、Row_format、Rows、Avr_row_length、Data_length、Max_data_length、Index_length、Data_free、Auto_increment、Create_time、Update_time、Check_time、Collation、Checksum、Create_options、Comment InnoDB存储引擎 概览（官方手册：innodb事务模型和锁） 数据存储在表空间。表空间是由innnodb管理的黑盒子，有一系列数据文件组成。 MVCC支持高并发，实现四个标准的隔离级别，默认可重复读，通过间隙锁策略防止幻读 基于聚簇索引建立 存储格式平台独立 内部优化：读取数据可预测性预读，在内存创建hash所以加速读（自适应哈希索引），加速插入插入缓冲区 MyISAM存储引擎 特性 存储 数据文件.MYD 索引文件.MYI 表锁、读取共享锁、写入排它锁 修复：检查与修复 索引特性：BLOB与TEXT，基于前500个字符创建表索引；支持全文索引 延迟更新索引建：不会立刻修改的索引数据写入磁盘，写到内存键缓冲区，清理键缓冲区或关闭表的时候讲对应索引块写入磁盘 MyISAM压缩表 针对创建表后导入数据不会再变更的适合压缩表 myisampack进行表压缩，不能进行修改（解压，修改，压缩），极大减少磁盘空间占用，支持只读索引 性能 扩展限制 表锁 MyISAM内建的其他存储引擎 Archive 只支持INSERT与SELECT 缓存所有写并利用zlib对插入的行进行压缩，SELECT需要扫全表：日志扫描 行级锁与专用缓冲区 Blackhole 无插入机制，丢弃插入数据 CSV引擎 处理CSV文件作为表 不支持索引 Federated 访问其他Mysql服务器的代理，创建一个远程MySQL客户端连接，查询传输到远程执行。然后提取或发送需要的数据 Memory 保存内存中 表结构保留，数据重启丢失 支持Hash索引 Merge 多个MyISAM合并的虚拟表 NDB 第三方存储引擎 OLTP XtraDB、PBXT、tokuDB 面向列的存储引擎 Infobright、InfiniDB 社区存储引擎 Aria Groonga OGGraph Q4M SphinxSE Spider VPForMysql 选择合适的引擎（优先Innodb（组合）） 考虑因素 事务 备份 崩溃恢复 日志型应用 插入快 分析报表：一、备库。二、按日期拆表 只读或大部分情况下只读的表 订单处理：事务（innodb） 电子公告牌和论坛：高读写 CD-ROM应用：表隔离且拷贝 大数据量：&gt;10TB Infobright 转换表的存储引擎 ALTER TABLE xx ENGINE &#x3D; InnoDB 按行数据从原表复制到新表，消耗系统IO，原表加读锁 导出与导入 mysqldump 创建与查询 INERT INTO XX SELECT * from xx； MySQL时间线3.23（2001）：SQL查询，InnoDB可以使用，全文索引和复制4.0（2003）：UNION和多表DELETE，重写了复制（备库使用俩线程复制）， innodb标配（行锁，外键），查询缓存，SSL连接4.1（2005）：子查询 INSERT ON DUPLICATE KEY UPDATE，支持UTF-8，支持新二进制协议，prepared语句5.0（2006）：视图、触发器、存储过程、存储函数5.1（2008）：分区，基于行的复制，plugin API5.5（2010）：innodb默认，性能，扩展性，复制，分区，半同步复制MySQL开发模式开源，插件模式","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://blog.tiki-xiang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"高性能MySql","slug":"高性能MySql","permalink":"http://blog.tiki-xiang.cn/tags/%E9%AB%98%E6%80%A7%E8%83%BDMySql/"},{"name":"MySql","slug":"MySql","permalink":"http://blog.tiki-xiang.cn/tags/MySql/"},{"name":"数据库","slug":"数据库","permalink":"http://blog.tiki-xiang.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}],"categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://blog.tiki-xiang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"高性能MySql","slug":"高性能MySql","permalink":"http://blog.tiki-xiang.cn/tags/%E9%AB%98%E6%80%A7%E8%83%BDMySql/"},{"name":"MySql","slug":"MySql","permalink":"http://blog.tiki-xiang.cn/tags/MySql/"},{"name":"数据库","slug":"数据库","permalink":"http://blog.tiki-xiang.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}